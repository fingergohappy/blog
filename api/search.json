[{"id":"a80e863ad04e203843f50e139a5edeb2","title":"macos下,实现vim切换模式自动切换输入法","content":"macos下,实现vim切换模式自动切换输入法作为一个重度vim模式使用用户,切换模式输入法不自动切换一直是一个蛋疼的问题,目前主要解决方案就是使用im-select,在对应使用的应用里面设置im-select的路径但是这种方式有一个问题就是如果应用不支持,就不会自动切换\n另一种方式就是使用rime输入法,但是对于我来说配置成本太高,不划算.\n经过的的研究,发现karabiner可以实现在任意应用中使用vim,按下对应的模式切换键实现自动切换输入法.\n安装karabinerkarabiner是mac下一个按键功能映射的软件,可以自己定义文件实现许多复杂的功能\nbrew不解释连招\nbashbrew install karabiner安装im-select继续brew不解释连招\nbashbrew install im-select创建映射文件/Users/fingerfrings/.config/karabiner/assets/complex_modifications路径创建一个vim-esc.json文件\n文件内容如下:\njson&#123;\n  &quot;title&quot;: &quot;Vim shortcuts&quot;,\n  &quot;rules&quot;: [\n     &#123;\n      &quot;description&quot;: &quot;Map ^+[ to esc&quot;,\n      &quot;manipulators&quot;: [\n        &#123;\n          &quot;type&quot;: &quot;basic&quot;,\n          &quot;from&quot;: &#123;\n            &quot;key_code&quot;: &quot;open_bracket&quot;,\n            &quot;modifiers&quot;: &#123;\n              &quot;mandatory&quot;: [&quot;control&quot;]\n            &#125;\n          &#125;,\n          &quot;to&quot;: [\n            &#123;\n              &quot;key_code&quot;: &quot;escape&quot;\n            &#125;,&#123;\n              &quot;shell_command&quot;: &quot;/usr/local/bin/im-select com.apple.keylayout.ABC&quot;\n            &#125;\n          ]\n        &#125;\n      ]\n     &#125;,\n    \n  ]\n&#125;\n上面文件的映射内容就是将Ctrl-[映射为Esc,同时执行/usr/local/bin/im-select com.apple.keylayout.ABC命令\n设置karabiner在complex Modifications选项中启用Map ^+[ to esc\n参考文档https://karabiner-elements.pqrs.org/docs\n","slug":"macos-vim-auto-change-input-method","date":"2023-09-20T10:37:19.000Z","categories_index":"some litttle tricks","tags_index":"macos,vim","author_index":"finger"},{"id":"3a126c86808bf36e1aa89411751a60c9","title":"hexo push后自动部署github pages","content":"hexo 提交后自动部署github pagehexo有几种部署方式,一种是本地编译后,直接不是public路径下的静态文件,一种是通过cli方式,向仓库提交source下的的markdown文件,出发action.实现自动部署\n本文主要说明后一种方式.\n创建github workflow在hexo的根目录的.github/workflows/pages.yml路径下创建文件,文件内容:\nyamlname: Pages\n\non:\n  push:\n    branches:\n      - main  # default branch\n\njobs:\n  pages:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;\n          # If your repository depends on submodule, please see: https://github.com/actions/checkout\n          submodules: recursive\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v2\n        with:\n        # 看下自己本地的noe版本\n          node-version: &#39;16&#39;\n      - name: Cache NPM dependencies\n        uses: actions/cache@v2\n        with:\n          path: node_modules\n          key: $&#123;&#123; runner.OS &#125;&#125;-npm-cache\n          restore-keys: |\n            $&#123;&#123; runner.OS &#125;&#125;-npm-cache\n      - name: Install Dependencies\n        run: npm install\n      - name: Build\n        run: npm run build\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;\n          publish_dir: ./public创建github pages参考 https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site\n创建完成后,微调一下:\n在settings-&gt;Pages-&gt;Build and deployment-&gt;Branch选项中,把branch改成gh-pages\n初始化本地仓库bashgit init .\ngit remote add origin $&#123;你上面创建的仓库地址&#125;\ngit remote add  .\ngit commit  -m &quot;init project&quot;gitgnore由于使用了github的自动部署功能,所以无需上传静态文件,在hexo根目录添加.gitignore文件\nbashpublic/\n.deploy*/\nnode_modules提交最后提交到main分支\nbashgit push -u origin main提交完成后,在github的action选项中可以看到正在构建,构建完成,就可以在https://$&#123;your-username&#125;.github.io路径访问你的在线博客了\n参考https://hexo.io/docs/github-pages\n","slug":"hexo-auto-deploy","date":"2023-09-20T09:31:18.000Z","categories_index":"hexo","tags_index":"hexo","author_index":"finger"}]